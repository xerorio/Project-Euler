# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:

# 1: 1
# 3: 1,3
# 6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28

# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?

from math import sqrt

triangular_numbers = [1]

def number_of_divisors(number: int) -> int:
    divisors = 0
    square_root = int(sqrt(number))
 
    for i in range(1, square_root + 1):
        if(number % i == 0):
            divisors += 2

    if (square_root * square_root == number):
        divisors -= 1
    
    return divisors

def calc_triangular_nums():
    # i is between 2 and 999999
    for i in range(2, 1000000):
        triangular_numbers.append(triangular_numbers[len(triangular_numbers) - 1] + i)

calc_triangular_nums()

for i in triangular_numbers:
    if (number_of_divisors(i) > 500):
        print(i)
        break

# Answer: 76576500